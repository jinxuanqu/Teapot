#define GL_GLEXT_PROTOTYPES 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <fcntl.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>


/*
#define v_Num 13008;
#define tx_Num 13498;
#define vn_Num 13008;
#define tan_Num 13008;
#define btan_Num 13008;
#define f_Num 13008;
*/
#define XRES 1280
#define YRES 720
void set_uniform(int p,char* name,int index);
void set_light();
void set_ground_material();
void set_teapot_material();
GLuint p; //the teapot shader
GLuint g; //ground shader
GLuint buffer_ID=1;
float eye[]    = {0.0, 4.2, 4.0};
float viewpt[] = {0.0, 2.6, 0.0};
float up[] = {0.0, 1.0, 0.0};
float light0_position[] = {3.0, 4.0, 3.0, 1.0};
float light0_direction[] = { -3.0, -4.0, -3.0, 1.0};

GLfloat vertex[13008][3];
GLfloat normal[13008][3];
GLfloat texcoord[13498][2];
GLfloat tangent[13008][3];
GLfloat bi_tangent[13008][3];
int face[13008][4][3];

struct point{
    float x,y,z;
    };
void view_volume(float *ep, float *vp)
{
    int w = glutGet(GLUT_WINDOW_WIDTH);
    int h = glutGet(GLUT_WINDOW_HEIGHT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0,1.0*w/h,0.1,200.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ep[0],ep[1],ep[2],vp[0],vp[1],vp[2],0.0,1.0,0.0);
}
int readFile()
{
    FILE *file1;
    file1 = fopen("teapot.605.obj","r");
    GLfloat a, b, c;
    int e,f,g, x,y,z;
    int vNum=0,txNum=0,vnNum=0,tanNum=0,btanNum=0,fNum=0;
    char v,n;
    while(!feof(file1))
    {
        v=fgetc(file1);
        switch(v)
        {
            case 'v':
                n = fgetc(file1);
                switch(n){
                    case ' ':
                        fscanf(file1,"%f%f%f",&a,&b,&c);
			//if(a!=0 && b!=0 && c!=0){
                        	vertex[vNum][0] = a;
                        	vertex[vNum][1] = b;
                        	vertex[vNum][2] = c;
                        	vNum++;
                        	break;
			//}
                    case 't':
                        fscanf(file1,"%f%f",&a,&b);
			//if(a!=0 && b!=0){
                        	texcoord[txNum][0] = a;
                        	texcoord[txNum][1] = b;
                        	txNum++;
                        	break;
			//}
                    case 'n':
                        fscanf(file1,"%f%f%f",&a,&b,&c);
			//if(a!=0 && b!=0 && c!=0){
                        	normal[vnNum][0] = a;
                        	normal[vnNum][1] = b;
                        	normal[vnNum][2] = c;
                        	vnNum++;
                        	break;
			//}
                    case 'x':
                        fscanf(file1,"%f%f%f",&a,&b,&c);
			//if(a!=0 && b!=0 && c!=0){
                        	tangent[tanNum][0] = a;
                        	tangent[tanNum][1] = b;
                        	tangent[tanNum][2] = c;
                        	tanNum++;
			//}
                        break;
                    case 'y':
                        fscanf(file1,"%f%f%f",&a,&b,&c);
			//if(a!=0 && b!=0 && c!=0){
                        	bi_tangent[btanNum][0] = a;
                        	bi_tangent[btanNum][1] = b;
                        	bi_tangent[btanNum][2] = c;
                        	btanNum++;
			// }
			break;
                    default:
                        break;
                }
                break;
            case 'f':
                fscanf(file1," %d/%d/%d %d/%d/%d %d/%d/%d %d/%d/%d",
                        &face[fNum][0][0], &face[fNum][0][1], &face[fNum][0][2],
                        &face[fNum][1][0], &face[fNum][1][1], &face[fNum][1][2],
                        &face[fNum][2][0], &face[fNum][2][1], &face[fNum][2][2],
                        &face[fNum][3][0], &face[fNum][3][1], &face[fNum][3][2]);
                fNum++;
                break;
            default:
                break;

        }
    }
    fclose(file1);
    return 0; 
}
void draw_sky(){
    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    float volumFactor = 4.0;
    struct point front[4]={{-volumFactor,0.0,volumFactor},{volumFactor,0.0,volumFactor},{volumFactor,volumFactor*2,volumFactor},{-volumFactor,volumFactor*2,volumFactor}};
    struct point back[4]={{-volumFactor,0.0,-volumFactor},{-volumFactor,volumFactor*2,-volumFactor},{volumFactor,volumFactor*2,-volumFactor},{volumFactor,0.0,-volumFactor}};
    struct point left[4]={{-volumFactor,0.0,-volumFactor},{-volumFactor,volumFactor*2,-volumFactor},{-volumFactor,volumFactor*2,volumFactor},{-volumFactor,0.0,volumFactor}};
    struct point right[4]={{volumFactor,0.0,-volumFactor},{volumFactor,volumFactor*2,-volumFactor},{volumFactor,volumFactor*2,volumFactor},{volumFactor,0.0,volumFactor}};
    struct point top[4]={{-volumFactor,volumFactor*2,-volumFactor},{-volumFactor,volumFactor*2,volumFactor},{volumFactor,volumFactor*2,volumFactor},{volumFactor,volumFactor*2,-volumFactor}};
    struct point bottom[4]={{-volumFactor,0.0,-volumFactor},{-volumFactor,0.0,volumFactor},{volumFactor,0.0,volumFactor},{volumFactor,0.0,-volumFactor}};
    float frontTexCoords[4][2] = {{1.0,1.0},{0.0,1.0},{0.0,0.0},{1.0,0.0}};
    float backTexCoords[4][2] = {{0.0,1.0},{0.0,0.0},{1.0,0.0},{1.0,1.0}};
    float leftTexCoords[4][2] = {{1.0,1.0},{1.0,0.0},{0.0,0.0},{0.0,1.0}};
    float rightTexCoords[4][2] = {{0.0,1.0},{0.0,0.0},{1.0,0.0},{1.0,1.0}};
    float topTexCoords[4][2] = {{0.0,1.0},{0.0,0.0},{1.0,0.0},{1.0,1.0}};
    float bottomTexCoords[4][2] = {{0.0,0.0},{0.0,1.0},{1.0,1.0},{1.0,0.0}};
    glUseProgram(0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D,4);
    glEnable(GL_TEXTURE_2D);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(frontTexCoords[i]);
        glVertex3f(front[i].x,front[i].y,front[i].z);
        glNormal3f(0.0,0.0,-1.0);
    }
    glEnd();
    glBindTexture(GL_TEXTURE_2D,5);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(backTexCoords[i]);
        glVertex3f(back[i].x,back[i].y,back[i].z);
        glNormal3f(0.0,0.0,1.0);
    }
    glEnd();
    glBindTexture(GL_TEXTURE_2D,6);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(leftTexCoords[i]);
        glVertex3f(left[i].x,left[i].y,left[i].z);
        glNormal3f(1.0,0.0,0.0);
    }
    glEnd();
    glBindTexture(GL_TEXTURE_2D,7);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(rightTexCoords[i]);
        glVertex3f(right[i].x,right[i].y,right[i].z);
        glNormal3f(-1.0,0.0,0.0);
    }
    glEnd();
    glBindTexture(GL_TEXTURE_2D,8);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(topTexCoords[i]);
        glVertex3f(top[i].x,top[i].y,top[i].z);
        glNormal3f(0.0,-1.0,0.0);
    }
    glEnd();
    glBindTexture(GL_TEXTURE_2D,9);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(bottomTexCoords[i]);
        glVertex3f(bottom[i].x,bottom[i].y,bottom[i].z);
        glNormal3f(0.0,1.0,0.0);
    }
    glEnd();
    glDisable(GL_TEXTURE_2D);  
    
}
void draw_ground(){
    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    struct point groundVet[4] = {{4.0,2.0,4.0},{4.0,2.0,-4.0},{-4.0,2.0,-4.0},{-4.0,2.0,4.0}};
    float groundTexCoords[4][2] = {{0.0,1.0},{1.0,1.0},{1.0,0.0},{0.0,0.0}};
	/*glUseProgram(g);	
	set_uniform(g,"shadowtexture",10);
	glActiveTexture(GL_TEXTURE10);
	glBindTexture(GL_TEXTURE_2D,10);*/
	view_volume(eye,viewpt);
	set_light();
    glUseProgram(0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D,10);
    glEnable(GL_TEXTURE_2D);
    glBegin(GL_QUADS);
    for(int i=0;i<4;i++){
        glTexCoord2fv(groundTexCoords[i]);
        glVertex3f(groundVet[i].x,groundVet[i].y,groundVet[i].z);
    }
    glEnd();
    glDisable(GL_TEXTURE_2D);
}

void save_matrix(float *ep, float *vp)
{
glMatrixMode(GL_TEXTURE); 
// This must match the unit used in the vertex shader.
glActiveTexture(GL_TEXTURE5);
glLoadIdentity();
glTranslatef(0.0,0.0,-0.005);
glScalef(0.5,0.5,0.5);
glTranslatef(1.0,1.0,1.0);
gluPerspective(45.0,(float)(XRES)/(float)(YRES),0.1,20.0);
gluLookAt(ep[0],ep[1],ep[2],vp[0],vp[1],vp[2],0.0,1.0,0.0);
}

void draw_stuff()
{
    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D,2);
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D,3);
    glEnable(GL_TEXTURE_2D);
    
    int i, j;
    int vi, ti, ni;

    int index_tangent = glGetAttribLocation(p,"tangent");
    int index_bitangent = glGetAttribLocation(p,"bitangent");
    glUseProgram(p);
    set_uniform(p,"mytexture",0);
    set_uniform(p,"mynormalmap",1);

    glBegin(GL_QUADS);
    for (i=0; i<13008; i++) {
        for (j=0; j<4; j++) {
                            
            vi = face[i][j][0] - 1; //note: the index in .obj starts from 1
            ti = face[i][j][1] - 1;
            ni = face[i][j][2] - 1;

            glNormal3f(normal[ni][0],normal[ni][1],normal[ni][2]);
            glTexCoord2f(texcoord[ti][0],texcoord[ti][1]);
		//printf("%d,%d\n",index_tangent,index_bitangent);
            //glVertexAttrib3f(index_tangent, tangent[vi][0],tangent[vi][1],tangent[vi][2]);
            //glVertexAttrib3f(index_bitangent, bi_tangent[vi][0],bi_tangent[vi][1],bi_tangent[vi][2]);
            glVertex3f(vertex[vi][0],vertex[vi][1],vertex[vi][2]);
        }
    }
    glEnd();
    glDisable(GL_TEXTURE_2D);
//glFlush();
}
void create_shadow_texture(){
//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
float eyepoint[3], viewpoint[3] = {0.0,0.2,0.0};
glBindFramebufferEXT(GL_FRAMEBUFFER,buffer_ID); 
glUseProgram(0);
for(int k=0;k<3;k++){ 
	eyepoint[k] = light0_position[k];
	//viewpoint[k] = light0_direction[k]+light0_position[k]; 
	}
view_volume(eyepoint,viewpoint);
set_light();
draw_stuff();
//glEnable(GL_CULL_FACE);
//glCullFace(GL_FRONT);
//glCullFace(GL_BACK);
glBindFramebufferEXT(GL_FRAMEBUFFER,0);
save_matrix(eyepoint,viewpoint); 
}

void build_shadowmap()
{
// Set properties of texture id #1.
glBindTexture(GL_TEXTURE_2D,10);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP );
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP );
// Declare size and type of texture; it has no data initially (last arg 0).
glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT,XRES,YRES, 0, 
	GL_DEPTH_COMPONENT, GL_UNSIGNED_BYTE, 0);
// Back to default.
glBindTexture(GL_TEXTURE_2D, 0);
glGenFramebuffersEXT(1,1);
glBindFramebufferEXT(GL_FRAMEBUFFER,1);
glDrawBuffer(GL_NONE); // No color buffers will be written.

// Attach this framebuffer (id #1 above) to texture (id #1 is penultimate arg),
// so that we can perform an offscreen render-to-texture.
glFramebufferTexture2DEXT(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D,10,0);
// Back to default.
glBindFramebufferEXT(GL_FRAMEBUFFER,0);
}
void renderScene(void)
{
    glClearColor(0.35,0.35,0.35, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    create_shadow_texture();
//glDisable(GL_CULL_FACE);
    draw_ground();
    draw_sky();
    //set_ground_material();
    glTranslatef(0.0,2.0,0.0);
    glRotatef(-50.0,0.0,1.0,0.0);
    draw_stuff();
    glutSwapBuffers();
}


char *read_shader_program(char const *filename)
{
    FILE *fp;
    FILE *fd;
    char *content = NULL;
    int count;
    fd = fopen(filename,"r");
    fseek(fd,0,SEEK_END);
    count = ftell(fd);
    fclose(fd);
    content = (char *)calloc(1,(count+1));
    fp = fopen(filename,"r");
    count = fread(content,sizeof(char),count,fp);
    content[count] = '\0';
    fclose(fp);
    return content; 
}


/*
void view_volume()
{
    int w = glutGet(GLUT_WINDOW_WIDTH);
    int h = glutGet(GLUT_WINDOW_HEIGHT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0,1.0*w/h,0.1,200.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    gluLookAt(eye[0],eye[1],eye[2],viewpt[0],viewpt[1],viewpt[2],up[0],up[1],up[2]);
}
*/
void set_light()
{
    glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
}

void set_teapot_material()
{
    float mat_diffuse[]  = {1.0, 0.8, 0.7, 1.0};
    float mat_specular[] = {0.35, 0.35, 0.35, 1.0};
    float mat_shiniess[] = {30.0};

    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shiniess);
}

void set_ground_material()
{
    float mat_diffuse[]  = {1.0, 0.8, 0.7, 1.0};
    float mat_specular[] = {2.5, 2.5, 2.5, 1.0};
    float mat_shiniess[] = {10.0};

    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shiniess);
}



unsigned int set_shaders(char const *vert, char const *frag)
{
    GLint vertCompiled, fragCompiled;
    char *vs, *fs;
    GLuint v, f, p;
    GLint logLen;
    GLchar log[200];
    v = glCreateShader(GL_VERTEX_SHADER);
    f = glCreateShader(GL_FRAGMENT_SHADER);
    vs = read_shader_program(vert);
    fs = read_shader_program(frag);
    if (vs == NULL || fs == NULL) {
    printf("Fail to load shaders. Rendering with fixed pipeline");
    return 0;
    }

    glShaderSource(v,1,(const char **)&vs,NULL);
    glShaderSource(f,1,(const char **)&fs,NULL);
    free(vs);
    free(fs); 
    glCompileShader(v);
    glCompileShader(f);

GLint success = 0;
GLint logSize = 0;
glGetShaderiv(v, GL_COMPILE_STATUS, &success);
if (success == GL_FALSE){
    printf("Can not compile the vertex shader\n");
    glGetShaderiv(v, GL_INFO_LOG_LENGTH, &logSize);
    if(logSize > 0) {
        glGetShaderInfoLog(v, logSize, &logSize, log);
        printf("Program Info Log: %s\n", log);
    }
}
glGetShaderiv(f, GL_COMPILE_STATUS, &success);
if (success == GL_FALSE){
    printf("Can not compile the fragment shader\n");
    glGetShaderiv(f, GL_INFO_LOG_LENGTH, &logSize);
    if(logSize > 0) {
        glGetShaderInfoLog(f, logSize, &logSize, log);
        printf("Program Info Log: %s\n", log);
    }
}

    p = glCreateProgram();
    glAttachShader(p,f);
    glAttachShader(p,v);
    glLinkProgram(p);

glValidateProgram(p);
glGetProgramiv(p, GL_LINK_STATUS, &success);
if (success == GL_FALSE){
    glGetProgramiv(p, GL_INFO_LOG_LENGTH, &logLen);
    if (logLen > 0) {
        glGetProgramInfoLog(p, logLen, &logLen, log);
        printf("The log: %s\n", log);
    }
    return 0;
} else {
    printf("Shader succeeds.\n");
    return(p);
}

}



void load_texture(char * filename, int tid)
{
    FILE *fopen(), *fptr;
    char buf[512];
    int im_size, im_width, im_height, max_color;
    unsigned char* texture_bytes, *parse;

    fptr=fopen(filename, "r");
    if (fptr==NULL) printf("fptr=NULL\n");
    fgets(buf,512,fptr);
    do {        
    fgets(buf,512,fptr);
    } while (buf[0]=='#');
    if (buf==NULL) printf("buf=NULL\n");
    parse = strtok(buf, " \t");
    im_width = atoi(parse);

    parse = strtok(NULL, " \n");
    im_height = atoi(parse);

    fgets(buf, 512, fptr);
    parse = strtok(buf, " \n");
    max_color = atoi(parse);
    im_size = im_width*im_height;
    texture_bytes = (unsigned char*) calloc(3, im_size);
    fread(texture_bytes,3,im_size, fptr);
    fclose(fptr);

    glBindTexture(GL_TEXTURE_2D, tid);
    glTexImage2D(GL_TEXTURE_2D,0, GL_RGB, im_width, im_height,0, GL_RGB,
    GL_UNSIGNED_BYTE, texture_bytes);
    
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    cfree(texture_bytes);
}

void set_uniform(int p,char* name,int index)
{
    int location;
    location = glGetUniformLocation(p,name);
    glUniform1i(location,index);
    
    location = glGetUniformLocation(p,name);
    glUniform1i(location,index);    
}

void getout(unsigned char key,int x, int y)
{
    switch(key){
        case 'q':
        case 'Q':
        case 27:
            exit(1);
        case 's':
            glRotatef(5.0,0.0,1.0,0.0);
            renderScene();
            break;
        default :
            break;
    }
}


int main (int argc, char ** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);
    glutInitWindowPosition(0,0);
    glutInitWindowSize(XRES/1.5, YRES/1.5);
    glutCreateWindow("phong-shaded teapot");    

    readFile();

    //view_volume();
    //set_light();
    set_teapot_material();
    // shader
    p = set_shaders("teapot.vert", "teapot.frag");
    g = set_shaders("ground.vert", "ground.frag");
    //glUseProgram(p);
    // texture
    load_texture("ground.ppm", 1);
    load_texture("teapotTex.ppm", 2);
    load_texture("fieldstoneN.ppm", 3);
    load_texture("front.ppm", 4);
    load_texture("back.ppm", 5);
    load_texture("left.ppm", 6);
    load_texture("right.ppm", 7);
    load_texture("top.ppm", 8);
    load_texture("bottom.ppm", 9);
    build_shadowmap();

    glutDisplayFunc(renderScene);
    //glutIdleFunc(update);
    glutKeyboardFunc(getout);
    glutMainLoop();
    
    return 0;
}
        
